AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template to setup a VPC, EC2 instance with a web server, and a load balancer.

Parameters:
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: Update the allowed values list to select additional instance types.

  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance

  S3ObjectPath:
    Type: String
    Description: S3 bucket name where the Python script is stored
    Default: "s3://jan2024sc/regions3.py"

  AllowedIPAddress1:
    Type: String
    Description: IP address allowed to access the web server.
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}'
    ConstraintDescription: Must be a valid CIDR block.
  #AllowedIPAddress2:
  #  Type: String
  #  Description: IP address allowed to access the web server.
  #  AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  #  ConstraintDescription: Must be a valid CIDR block.
  #AllowedIPAddress3:
  #  Type: String
  #  Description: IP address allowed to access the web server.
  #  AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  #  ConstraintDescription: Must be a valid CIDR block.
  #AllowedIPAddress4:
  #  Type: String
  #  Description: IP address allowed to access the web server.
  #  AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  #  ConstraintDescription: Must be a valid CIDR block.
  #AllowedIPAddress5:
  #  Type: String
  #  Description: IP address allowed to access the web server.
  #  AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  #  ConstraintDescription: Must be a valid CIDR block.
  

  VPCCIDR:
    Type: String
    Description: VPC CIDR
    MinLength: 10
    MaxLength: 18
    Default: "10.0.0.0/16"

  PublicSubnetA:
    Type: String
    Description: VPC CIDR
    MinLength: 10
    MaxLength: 18
    Default: "10.0.10.0/24"

  PublicSubnetB:
    Type: String
    Description: VPC CIDR
    MinLength: 10
    MaxLength: 18
    Default: "10.0.20.0/24"

Resources:

#########################
# VPC Resources
#########################
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: !Ref VPCCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: 'default'
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'AWS::StackName'

    # Internet accessable subnet in the first availability zone
    PubSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock: !Ref PublicSubnetA
            VpcId: !Ref VPC
            Tags:
                - Key: 'Name'
                  Value: 'PubSubnetZoneA'

    # Internet accessable subnet in the second availability zone
    PubSubnetZoneB:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '1'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock: !Ref PublicSubnetB
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value: 'PubSubnetZoneB'

    # Gateway to the internet
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'AWS::StackName'

    # Associate the gateway to the VPC
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId:
                Ref: 'InternetGateway'
            VpcId:
                Ref: 'VPC'

    # Routing table for the public subnet in availability zone A
    RouteTablePubZone:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value: !Sub 'PubZoneRouteTable'

    # Route traffic through the internet gateway
    RoutePubZone:
        DependsOn:
            - InternetGateway
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId:
                Ref: 'InternetGateway'
            RouteTableId:
                Ref: 'RouteTablePubZone'


    # Associate public subnet to its routing table
    RouteAssociationPubSubnetZoneA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PubSubnetZoneA'
            RouteTableId:
                Ref: 'RouteTablePubZone'

    # Associate public subnet to its routing table
    RouteAssociationPubSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PubSubnetZoneB'
            RouteTableId:
                Ref: 'RouteTablePubZone'

#########################
# Security Group
#########################
    # EC2 Security Group Allowing Port 22 from AllowedIPAddress and 80 from your ELBSecurityGroup
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'SSH and Port 80'
            VpcId:
              Ref: VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: !Ref AllowedIPAddress1
                #- IpProtocol: tcp
                  #FromPort: 22
                  #ToPort: 22
                  #CidrIp: !Ref AllowedIPAddress2
                #- IpProtocol: tcp
                  #FromPort: 22
                  #ToPort: 22
                  #CidrIp: !Ref AllowedIPAddress5
                #- IpProtocol: tcp
                  #FromPort: 22
                  #ToPort: 22
                  #CidrIp: !Ref AllowedIPAddress4
                #- IpProtocol: tcp
                  #FromPort: 22
                  #ToPort: 22
                  #CidrIp: !Ref AllowedIPAddress5
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  SourceSecurityGroupId:
                      Ref: ELBSecurityGroup

    # ELB Security Group allowing Port 80 from AllowedIPAddress
    ELBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'HTTP Port 80'
            VpcId:
              Ref: VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: !Ref AllowedIPAddress1
                #- IpProtocol: tcp
                  #FromPort: 80
                  #ToPort: 80
                  #CidrIp: !Ref AllowedIPAddress2
                #- IpProtocol: tcp
                  #FromPort: 80
                  #ToPort: 80
                  #CidrIp: !Ref AllowedIPAddress3
                #- IpProtocol: tcp
                  #FromPort: 80
                  #ToPort: 80
                  #CidrIp: !Ref AllowedIPAddress4
                #- IpProtocol: tcp
                  #FromPort: 80
                  #ToPort: 80
                  #CidrIp: !Ref AllowedIPAddress5
                
#########################
# EC2 InstanceRole
#########################
    EC2InstanceRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: EC2InstanceRole
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Principal:
                    Service: ec2.amazonaws.com
                  Action: sts:AssumeRole
          Policies:
              - PolicyName: SSMFullAccess
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - ssm:*
                        - s3:*
                        - ec2:DescribeInstance*
                        - ec2:DescribeTags
                      Resource: '*'

#########################
# EC2 InstanceProfile
#########################
    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          InstanceProfileName: EC2InstanceProfile
          Roles:
              - !Ref EC2InstanceRole

#########################
# EC2 Instance
#########################
    # Linux Instance with Apache running on Port 80
    AmazonLinuxInstance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: !Ref InstanceType
        KeyName: !Ref EC2KeyPair
        IamInstanceProfile: !Ref EC2InstanceProfile
        Monitoring: 'true'
        NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
          - !Ref EC2SecurityGroup
          SubnetId:
            Ref: PubSubnetZoneA
        Tenancy: default
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            cd /tmp
            yum update -y
            yum install -y httpd
            amazon-linux-extras install epel -y
            #yum install -y nginx
            #systemctl start nginx
            #systemctl enable nginx
            sudo pip3 install requests==2.18.4
            aws s3 cp ${S3ObjectPath} regions.py
            pwd
            ls -ltr
            python3 regions.py
            cat sorted_regions.html > /var/www/html/index.html
            systemctl start httpd
            systemctl enable httpd
            /opt/aws/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --resource AmazonLinuxInstance \
              --region ${AWS::Region}
        Tags:
            - Key: 'Name'
              Value:
                  Ref: 'AWS::StackName'

    # Target Group
    EC2TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        Matcher:
          HttpCode: '200'
        Name: EC2TargetGroup
        Port: 80
        Protocol: HTTP
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        Targets:
        - Id:
            Ref: AmazonLinuxInstance
          Port: 80
        UnhealthyThresholdCount: 3
        VpcId:
          Ref: 'VPC'
        Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80

    #ELB (ALB)
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: EC2TargetGroup
        LoadBalancerArn:
            Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing # or internal
        Subnets:
        - Ref: PubSubnetZoneA
        - Ref: PubSubnetZoneB
        SecurityGroups:
        - Ref: ELBSecurityGroup

    #EIP
    EIP:
      Type: 'AWS::EC2::EIP'
      Properties:
        InstanceId: !Ref AmazonLinuxInstance


Outputs:

    VPC:
        Description: 'Virtual Private Cloud'
        Value:
          Ref: 'VPC'
    ALBHostName:
        Description: 'Application Load Balancer Hostname'
        Value:
          !GetAtt ApplicationLoadBalancer.DNSName
    EC2Instance:
        Description: 'EC2 Instance'
        Value:
          Ref: AmazonLinuxInstance
    EC2TargetGroup:
        Description: 'EC2 Target Group'
        Value:
          Ref: EC2TargetGroup
    ApplicationLoadBalancer:
        Description: 'Application Load Balancer'
        Value:
          Ref: ApplicationLoadBalancer
    SSHACCESS:
        Description: 'SSH Access'
        Value: !Sub 'ssh -i your-keypair-pem ec2-user@${EIP}'
